/*
implement a trie with insert, search, and startsWith methods.

Note:
You may assume that all inputs are consist of lowercase letters a-z.
*/

class TrieNode {

	// Initialize your data structure here.
	public Map<Character, TrieNode> children;
	public boolean isLeaf = false;
	public char val;

	public TrieNode() {

	}

	public TrieNode(char val) {

		this.val = val;
	}

}

public class Trie {
	private TrieNode root;

	public Trie() {
		root = new TrieNode();
	}

	// Inserts a word into the trie.
	public void insert(String word) {
		if (word == null)
			return;
		TrieNode trieNode = root;
		for (int i = 0; i < word.length(); i++) {
			char val = word.charAt(i);

			if (trieNode.children == null)
				trieNode.children = new HashMap<Character, TrieNode>();
			if (!trieNode.children.containsKey(val)) {
				trieNode.children.put(val, new TrieNode(val));
			}
			trieNode = trieNode.children.get(val);

		}
		trieNode.isLeaf = true;
	}

	// Returns if the word is in the trie.
	public boolean search(String word) {
		if (word == null)
			return false;
		TrieNode trieNode = root;

		for (int i = 0; i < word.length(); i++) {
			char val = word.charAt(i);
			if (trieNode.children == null
					|| !trieNode.children.containsKey(val))
				return false;
			trieNode = trieNode.children.get(val);

		}
		return trieNode.isLeaf;

	}

	// Returns if there is any word in the trie
	// that starts with the given prefix.
	public boolean startsWith(String prefix) {
		if (prefix == null)
			return false;
		TrieNode trieNode = root;
		for (int i = 0; i < prefix.length(); i++) {
			char val = prefix.charAt(i);
			if (trieNode.children == null
					|| !trieNode.children.containsKey(val))
				return false;
			trieNode = trieNode.children.get(val);
		}

		return true;

	}
}

// Your Trie object will be instantiated and called as such:
// Trie trie = new Trie();
// trie.insert("somestring");
// trie.search("key");
