public class Solution {
    public int findMin(int[] nums) {
        
       return  findMin(nums ,0 , nums.length-1);
        
    }
    
    private int findMin(int A[] ,int low ,int high){
        if(low >= high) return A[low];
        
        int mid = (high +low)/2;
        
        if(mid > 0 && A[mid] < A[mid-1]) return A[mid];
        
        if(A[mid] >=A[low] && A[mid] > A[high]) {
            return findMin(A,mid+1 , high);
            
        }else {
            return findMin(A,low , mid-1);
            
        }
        
    }
}




// when Array Contains Duplicate Elements 



public class Solution {
    public int findMin(int[] nums) {
        
        return findMin(nums ,0 , nums.length-1);
        
    }
    
    private int findMin(int A[] ,int low ,int high){
        if(low >= high) return A[low];
        
        int mid = (low+high)/2;
        
        if(A[low] == A[mid] && A[mid] == A[high])
        return findMin(A,low+1,high);
        
        if(A[mid] > A[high]) return findMin(A,mid+1,high);
         return findMin(A,low,mid);
    }
}

